subPathwayL = vector()
zScoreL = vector()
# build a graph
df = cbind(reactant,product)
gr = ftM2graphNEL(df, W= weight, V=NULL, edgemode="directed")
node = nodes(gr)
edgeW = edgeWeights(gr)
visitted = vector()
for(i in 1:length(node)){
for(k in 1:length(node)){
visitted[node[k]] = FALSE
}
startNode = node[i]
visitted[startNode] = TRUE
subPathway = c(startNode)
edgeWL = edgeW[[startNode]]
if(length(edgeWL) == 0){
next
}
# get list of its neighbors with decreasing order of weights
neighborL = sort(edgeWL, decreasing = TRUE)
# get the next node
nodeL = names(neighborL)
nextNode = nodeL[1]
visitted[nextNode] = TRUE
subPathway  = c(subPathway, nextNode)
z_score = neighborL[1]#getSubPathwayZScore(subPathway, tData, nData)
finish = FALSE
j = 0
currentNode = nextNode
while(!finish){
nEdgeWL = edgeW[[currentNode]]
if(length(nEdgeWL) == 0)
break
neighborL = sort(nEdgeWL, decreasing = TRUE)
count = length(neighborL)
notFound = FALSE
for(j in 1:count){
nodeL = names(neighborL)
nextNode = nodeL[j]
if(!visitted[nextNode]){
subPathway = c(subPathway, nextNode)
z_tmp = getSubPathwayZScore(subPathway, tPS, nPS,alt)#getSubPathwayZScoreByStage(subPathway, tData, nData)
if(z_tmp > 1.645){
# choose this node
currentNode = nextNode
visitted[nextNode] = TRUE
z_score = z_tmp
break
}else{
# remove this node and try to find another
subPathway = subPathway[-which(subPathway == nextNode)]
visitted[nextNode] = FALSE
notFound = TRUE
}
}else{
finish = TRUE
break
}
}
# if there is no more neighbor to explore
# then stop growing
if(j == count && notFound){
finish = TRUE
}
}
subPathwayL = c(subPathwayL ,paste(subPathway, collapse = "->"))
zScoreL = c(zScoreL,z_score)
}
dt = data.frame(pathway = factor(c(subPathwayL), ordered = TRUE),
score = c(zScoreL))
dt = dt[order(dt$score, decreasing = TRUE),]
write.xlsx(dt, paste("D:/project/lipidomics/data/pathway analysis/most_",atv,"_pathway_stage_",stages[s],".xlsx",sep=""))
# generate a list of found subpathways with its z_score
subPathwayL = vector()
zScoreL = vector()
# build a graph
df = cbind(reactant,product)
gr = ftM2graphNEL(df, W= weight, V=NULL, edgemode="directed")
node = nodes(gr)
edgeW = edgeWeights(gr)
visitted = vector()
weight
# get all reactions
reactions = as.matrix(read.csv("D:/project/lipidomics/reaction1s.csv", header = T))
# get set of reactants and products
reactant = vector()
product = vector()
# This is for searching changed pathways in different stages
patientData = getPatientData()
pml = stageMeta(patientData)
patientMeta = pml$patientMeta
#split into stages
stages = unique(patientMeta)
stagePatients =  list()
patientList = list()
if(alt=="greater")
atv = "active"
else
atv = "inactive"
for(i in 1:length(stages)){
poi = which(patientMeta == stages[i])
patientList[[i]] = poi
stagePatients[[stages[i]]] = tData[poi,]
}
for(s in 1:length(stages)){
tPS = stagePatients[[stages[s]]]
nPS = nData[patientList[[s]],]
for(i in 1:nrow(reactions)){
reactant[i] = reactions[i,1]
product[i] = reactions[i,2]
weight[i] = getEdgeZScore(reactant[i], product[i], tPS, nPS,alt)
}
# generate a list of found subpathways with its z_score
subPathwayL = vector()
zScoreL = vector()
# build a graph
df = cbind(reactant,product)
gr = ftM2graphNEL(df, W= ZScore, V=NULL, edgemode="directed")
node = nodes(gr)
edgeW = edgeWeights(gr)
visited = vector()
for(i in 1:length(node)){
visited[node[i]] = FALSE
}
dataL = list()
dataL[[1]] = vector()
for(i in 1:length(node)){
visited[which(visited==TRUE)] = FALSE
dataL[[2]] = visited
if(!visited[node[i]]){
pathway = c(node[i])
dataL = getSigPathway(dataL,pathway, edgeW, node[i], tData, nData,alt,TRUE)
}
}
dt = data.frame(pathway = factor(names(dataL[[1]])), score = dataL[[1]])
dt = dt[order(dt$score, decreasing = TRUE),]
write.xlsx(dt, paste("D:/project/lipidomics/data/pathway analysis/most_",atv,"_pathway_stage_",stages[s],".xlsx",sep=""))
}
source('D:/project/lipidomics/data/pathway analysis/findSignificantPathway.r')
findMostSigPathwaysByStage(tData, nData, "greater")
#find the most inactive pathways by stage
findMostSigPathwaysByStage(tData, nData, "less")
#find all acive pathways by stage
findAllSigPathwaysByStage(tData, nData, "greater")
#find all inactive pathways by stage
findAllSigPathwaysByStage(tData, nData, "less")
findMostSigPathwaysByStage(tData, nData, "greater")
# This is for searching changed pathways in different stages
patientData = getPatientData()
pml = stageMeta(patientData)
patientMeta = pml$patientMeta
#split into stages
stages = unique(patientMeta)
stagePatients =  list()
patientList = list()
if(alt=="greater")
atv = "active"
else
atv = "inactive"
for(i in 1:length(stages)){
poi = which(patientMeta == stages[i])
patientList[[i]] = poi
stagePatients[[stages[i]]] = tData[poi,]
}
for(s in 1:length(stages)){
tPS = stagePatients[[stages[s]]]
nPS = nData[patientList[[s]],]
for(i in 1:nrow(reactions)){
reactant[i] = reactions[i,1]
product[i] = reactions[i,2]
weight[i] = getEdgeZScore(reactant[i], product[i], tPS, nPS,alt)
}
# generate a list of found subpathways with its z_score
subPathwayL = vector()
zScoreL = vector()
# build a graph
df = cbind(reactant,product)
gr = ftM2graphNEL(df, W= weight, V=NULL, edgemode="directed")
node = nodes(gr)
edgeW = edgeWeights(gr)
visitted = vector()
for(i in 1:length(node)){
for(k in 1:length(node)){
visitted[node[k]] = FALSE
}
startNode = node[i]
visitted[startNode] = TRUE
subPathway = c(startNode)
edgeWL = edgeW[[startNode]]
if(length(edgeWL) == 0){
next
}
# get list of its neighbors with decreasing order of weights
neighborL = sort(edgeWL, decreasing = TRUE)
# get the next node
nodeL = names(neighborL)
nextNode = nodeL[1]
visitted[nextNode] = TRUE
subPathway  = c(subPathway, nextNode)
z_score = neighborL[1]#getSubPathwayZScore(subPathway, tData, nData)
finish = FALSE
j = 0
currentNode = nextNode
while(!finish){
nEdgeWL = edgeW[[currentNode]]
if(length(nEdgeWL) == 0)
break
neighborL = sort(nEdgeWL, decreasing = TRUE)
count = length(neighborL)
notFound = FALSE
for(j in 1:count){
nodeL = names(neighborL)
nextNode = nodeL[j]
if(!visitted[nextNode]){
subPathway = c(subPathway, nextNode)
z_tmp = getSubPathwayZScore(subPathway, tPS, nPS,alt)#getSubPathwayZScoreByStage(subPathway, tData, nData)
if(z_tmp > 1.645){
# choose this node
currentNode = nextNode
visitted[nextNode] = TRUE
z_score = z_tmp
break
}else{
# remove this node and try to find another
subPathway = subPathway[-which(subPathway == nextNode)]
visitted[nextNode] = FALSE
notFound = TRUE
}
}else{
finish = TRUE
break
}
}
# if there is no more neighbor to explore
# then stop growing
if(j == count && notFound){
finish = TRUE
}
}
subPathwayL = c(subPathwayL ,paste(subPathway, collapse = "->"))
zScoreL = c(zScoreL,z_score)
}
dt = data.frame(pathway = factor(c(subPathwayL), ordered = TRUE),
score = c(zScoreL))
dt = dt[order(dt$score, decreasing = TRUE),]
write.xlsx(dt, paste("D:/project/lipidomics/data/pathway analysis/most_",atv,"_pathway_stage_",stages[s],".xlsx",sep=""))
}
source('D:/project/lipidomics/data/pathway analysis/findSignificantPathway.r')
closeDBConnection()
findMostSigPathwaysByStage(tData, nData, "greater")
findMostSigPathwaysByStage(tData, nData, "greater")
closeDbConnection()
closeDBConnection()
findMostSigPathwaysByStage(tData, nData, "greater")
# get all reactions
reactions = as.matrix(read.csv("D:/project/lipidomics/reaction1s.csv", header = T))
# get set of reactants and products
reactant = vector()
product = vector()
# This is for searching changed pathways in different stages
patientData = getPatientData()
pml = stageMeta(patientData)
patientMeta = pml$patientMeta
#split into stages
stages = unique(patientMeta)
stagePatients =  list()
patientList = list()
if(alt=="greater")
atv = "active"
else
atv = "inactive"
for(i in 1:length(stages)){
poi = which(patientMeta == stages[i])
patientList[[i]] = poi
stagePatients[[stages[i]]] = tData[poi,]
}
for(s in 1:length(stages)){
tPS = stagePatients[[stages[s]]]
nPS = nData[patientList[[s]],]
for(i in 1:nrow(reactions)){
reactant[i] = reactions[i,1]
product[i] = reactions[i,2]
weight[i] = getEdgeZScore(reactant[i], product[i], tPS, nPS,alt)
}
# generate a list of found subpathways with its z_score
subPathwayL = vector()
zScoreL = vector()
# build a graph
df = cbind(reactant,product)
gr = ftM2graphNEL(df, W= weight, V=NULL, edgemode="directed")
node = nodes(gr)
edgeW = edgeWeights(gr)
visitted = vector()
for(i in 1:length(node)){
for(k in 1:length(node)){
visitted[node[k]] = FALSE
}
startNode = node[i]
visitted[startNode] = TRUE
subPathway = c(startNode)
edgeWL = edgeW[[startNode]]
if(length(edgeWL) == 0){
next
}
# get list of its neighbors with decreasing order of weights
neighborL = sort(edgeWL, decreasing = TRUE)
# get the next node
nodeL = names(neighborL)
nextNode = nodeL[1]
visitted[nextNode] = TRUE
subPathway  = c(subPathway, nextNode)
z_score = neighborL[1]#getSubPathwayZScore(subPathway, tData, nData)
finish = FALSE
j = 0
currentNode = nextNode
while(!finish){
nEdgeWL = edgeW[[currentNode]]
if(length(nEdgeWL) == 0)
break
neighborL = sort(nEdgeWL, decreasing = TRUE)
count = length(neighborL)
notFound = FALSE
for(j in 1:count){
nodeL = names(neighborL)
nextNode = nodeL[j]
if(!visitted[nextNode]){
subPathway = c(subPathway, nextNode)
z_tmp = getSubPathwayZScore(subPathway, tPS, nPS,alt)#getSubPathwayZScoreByStage(subPathway, tData, nData)
if(z_tmp > 1.645){
# choose this node
currentNode = nextNode
visitted[nextNode] = TRUE
z_score = z_tmp
break
}else{
# remove this node and try to find another
subPathway = subPathway[-which(subPathway == nextNode)]
visitted[nextNode] = FALSE
notFound = TRUE
}
}else{
finish = TRUE
break
}
}
# if there is no more neighbor to explore
# then stop growing
if(j == count && notFound){
finish = TRUE
}
}
subPathwayL = c(subPathwayL ,paste(subPathway, collapse = "->"))
zScoreL = c(zScoreL,z_score)
}
dt = data.frame(pathway = factor(c(subPathwayL), ordered = TRUE),
score = c(zScoreL))
dt = dt[order(dt$score, decreasing = TRUE),]
write.xlsx(dt, paste("D:/project/lipidomics/data/pathway analysis/most_",atv,"_pathway_stage_",stages[s],".xlsx",sep=""))
}
# get all reactions
reactions = as.matrix(read.csv("D:/project/lipidomics/reaction1s.csv", header = T))
# get set of reactants and products
reactant = vector()
product = vector()
# This is for searching changed pathways in different stages
patientData = getPatientData()
pml = stageMeta(patientData)
patientMeta = pml$patientMeta
#split into stages
stages = unique(patientMeta)
stagePatients =  list()
patientList = list()
if(alt=="greater")
atv = "active"
else
atv = "inactive"
for(i in 1:length(stages)){
poi = which(patientMeta == stages[i])
patientList[[i]] = poi
stagePatients[[stages[i]]] = tData[poi,]
}
atv
alt
# get all reactions
reactions = as.matrix(read.csv("D:/project/lipidomics/reaction1s.csv", header = T))
# get set of reactants and products
reactant = vector()
product = vector()
# This is for searching changed pathways in different stages
patientData = getPatientData()
pml = stageMeta(patientData)
patientMeta = pml$patientMeta
#split into stages
stages = unique(patientMeta)
stagePatients =  list()
patientList = list()
if(alt=="greater"){
atv = "active"
}else{
atv = "inactive"
}
atv
for(i in 1:length(stages)){
poi = which(patientMeta == stages[i])
patientList[[i]] = poi
stagePatients[[stages[i]]] = tData[poi,]
}
s=1
tPS = stagePatients[[stages[s]]]
nPS = nData[patientList[[s]],]
for(i in 1:nrow(reactions)){
reactant[i] = reactions[i,1]
product[i] = reactions[i,2]
weight[i] = getEdgeZScore(reactant[i], product[i], tPS, nPS,alt)
}
# generate a list of found subpathways with its z_score
subPathwayL = vector()
zScoreL = vector()
# build a graph
df = cbind(reactant,product)
gr = ftM2graphNEL(df, W= weight, V=NULL, edgemode="directed")
node = nodes(gr)
edgeW = edgeWeights(gr)
visitted = vector()
for(i in 1:length(node)){
for(k in 1:length(node)){
visitted[node[k]] = FALSE
}
startNode = node[i]
visitted[startNode] = TRUE
subPathway = c(startNode)
edgeWL = edgeW[[startNode]]
if(length(edgeWL) == 0){
next
}
# get list of its neighbors with decreasing order of weights
neighborL = sort(edgeWL, decreasing = TRUE)
# get the next node
nodeL = names(neighborL)
nextNode = nodeL[1]
visitted[nextNode] = TRUE
subPathway  = c(subPathway, nextNode)
z_score = neighborL[1]#getSubPathwayZScore(subPathway, tData, nData)
finish = FALSE
j = 0
currentNode = nextNode
while(!finish){
nEdgeWL = edgeW[[currentNode]]
if(length(nEdgeWL) == 0)
break
neighborL = sort(nEdgeWL, decreasing = TRUE)
count = length(neighborL)
notFound = FALSE
for(j in 1:count){
nodeL = names(neighborL)
nextNode = nodeL[j]
if(!visitted[nextNode]){
subPathway = c(subPathway, nextNode)
z_tmp = getSubPathwayZScore(subPathway, tPS, nPS,alt)#getSubPathwayZScoreByStage(subPathway, tData, nData)
if(z_tmp > 1.645){
# choose this node
currentNode = nextNode
visitted[nextNode] = TRUE
z_score = z_tmp
break
}else{
# remove this node and try to find another
subPathway = subPathway[-which(subPathway == nextNode)]
visitted[nextNode] = FALSE
notFound = TRUE
}
}else{
finish = TRUE
break
}
}
# if there is no more neighbor to explore
# then stop growing
if(j == count && notFound){
finish = TRUE
}
}
subPathwayL = c(subPathwayL ,paste(subPathway, collapse = "->"))
zScoreL = c(zScoreL,z_score)
}
dt = data.frame(pathway = factor(c(subPathwayL), ordered = TRUE),
score = c(zScoreL))
dt = dt[order(dt$score, decreasing = TRUE),]
write.xlsx(dt, paste("D:/project/lipidomics/data/pathway analysis/most_",atv,"_pathway_stage_",stages[s],".xlsx",sep=""))
tPS = stagePatients[[stages[s]]]
nPS = nData[patientList[[s]],]
for(i in 1:nrow(reactions)){
reactant[i] = reactions[i,1]
product[i] = reactions[i,2]
weight[i] = getEdgeZScore(reactant[i], product[i], tPS, nPS,alt)
}
tPS
i
getEdgeZScore(reactant[i], product[i], tPS, nPS,alt)#
reactant[i]
product[i]
reactant = "PA"
product = "DG"
tData = tPS
nData = nPS
trData = filterClassPSM(tData,reactant)
tpData = filterClassPSM(tData,product)
nrData = filterClassPSM(nData,reactant)
npData = filterClassPSM(nData,product)
filterClassPSM(tData,reactant)
specieData = getSpecieData()
